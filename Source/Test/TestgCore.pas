unit TestgCore;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, gCore;

type
  // Test methods for class TgBase

  TgBaseCustom = class(TgBase)
  strict private
    FIntegerProperty: Integer;
    FManuallyConstructedObjectProperty: TgBase;
    FObjectProperty: TgBase;
    FStringProperty: String;
  published
    [DefaultValue(5)]
    property IntegerProperty: Integer read FIntegerProperty write FIntegerProperty;
    [Exclude([AutoCreate])]
    property ManuallyConstructedObjectProperty: TgBase read FManuallyConstructedObjectProperty write FManuallyConstructedObjectProperty;
    property ObjectProperty: TgBase read FObjectProperty;
    [DefaultValue('Test')]
    property StringProperty: String read FStringProperty write FStringProperty;
  end;

  TestTgBase = class(TTestCase)
  strict private
    FgBase: TgBaseCustom;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCreate;
  end;

implementation

Uses
  SysUtils
  ;

procedure TestTgBase.SetUp;
begin
  FgBase := TgBaseCustom.Create;
end;

procedure TestTgBase.TearDown;
begin
  FreeAndNil(FgBase);
end;

procedure TestTgBase.TestCreate;
var
  Base : TgBase;
  BaseCustom: TgBaseCustom;
begin
  CheckNull(FgBase.Owner, 'When a constructor is called without a parameter, its owner should be nil.');
  CheckNotNull(FgBase.ObjectProperty, 'Object properties should be constructed automatically if the Exclude([AutoCreate]) attribute is not set.');
  CheckNull(FgBase.ManuallyConstructedObjectProperty, 'Object properties with the Exlude([AutoCreate]) attribute should not be nil.');
  Check(FgBase=FgBase.ObjectProperty.Owner, 'The owner of an automatically constructed object property shoud be set to the object that created it.');
  CheckEquals(5, FgBase.IntegerProperty, 'Default integer values should be set for properties with a DefaultValue attribute.');
  CheckEquals('Test', FgBase.StringProperty, 'Default string values should be set for properties with a DefaultValue attribute.');
  Base := TgBase.Create;
  try
    BaseCustom := TgBaseCustom.Create(Base);
    try
      Check(BaseCustom.ObjectProperty = Base, 'Object properties should take the value of an existing owner object if one exists.');
    finally
      BaseCustom.Free;
    end;
  finally
    Base.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgBase.Suite);
end.

